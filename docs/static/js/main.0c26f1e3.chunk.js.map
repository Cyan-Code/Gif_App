{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GiffGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","cat","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiffGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+KAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKhB,SACE,uBACEO,KAAO,OACPC,MAAUT,EACVU,SAjBoB,SAACP,GACzBF,EAAeE,EAAMQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACfC,EAAMC,UAAUH,GAChBI,EAFe,gDAEgCF,EAFhC,+DAGFG,MAAOD,GAHL,cAGfE,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAVjB,kBAcdK,GAdc,4CAAH,sDCCPO,EAAc,SAAEL,GAE3B,OACE,sBAAKM,UAAU,uBAAf,UACE,kCAAKN,EAAIE,MAAT,OACA,qBAAKK,IAAKP,EAAIP,IAAKe,IAAKR,EAAIE,YCHrBO,EAAW,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEzB,ECH0B,SAAEA,GAC5B,MAA0Bd,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAY,WAEVzB,EAASC,GACNyB,MAAM,SAAAd,GACLY,EAAU,CACRf,KAAMG,EACNU,SAAS,SAGb,CAACrB,IAEEsB,EDdiBI,CAAa1B,GAA9BqB,EAAP,EAAOA,QAASb,EAAhB,EAAgBA,KAEhB,OACE,qCACA,qBAAIS,UAAU,uBAAd,cAAuCjB,EAAvC,OAEEqB,GAAW,mBAAGJ,UAAY,sBAAf,qBAEb,qBAAKA,UAAU,YAAf,SACE,6BACE,6BAEIT,EAAKE,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEOA,GADGA,EAAIC,iBEKbe,EArBa,WAC1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KACE,OACE,qCACE,8CACE,cAAC,EAAD,CAAcA,cAAgBA,IAChC,uBACA,6BAEI2C,EAAWlB,KAAK,SAAAV,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAaA,GADLA,Y,MCVxB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0c26f1e3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n  \r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue (event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories(cats => [ inputValue, ...cats ])\r\n      setInputValue('')      \r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = { handleSubmit }>\r\n      <input\r\n        type = \"text\"\r\n        value = { inputValue }\r\n        onChange = { handleInputChange }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async( category ) => {\r\n  const cat = encodeURI(category)\r\n  const url = `http://api.giphy.com/v1/gifs/search?q=${cat}&limit=10&api_key=06JVgbCCAEDEX3x1OCPstMV1IejYv9Ed`\r\n  const resp = await fetch( url )\r\n  const { data } = await resp.json()\r\n\r\n  const gifs = data.map ( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    } \r\n  })\r\n  \r\n  return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( img ) => {\r\n\r\n  return (\r\n    <div className=\"card animate__fadeIn\">\r\n      <p> {img.title} </p>\r\n      <img src={img.url} alt={img.title} />\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GiffGrid = ({ category }) => {\r\n\r\n  const {loading, data} = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n    <h3 className=\"card animate__fadeIn\"> {category} </h3>\r\n    \r\n    { loading && <p className = \"card animate__flash\">Loading</p>}\r\n\r\n    <div className=\"card-grid\">\r\n      <ol>\r\n        <li>\r\n          {\r\n            data.map ( img => (\r\n              <GifGridItem\r\n                key = { img.id }\r\n                { ...img }\r\n              />\r\n            ))\r\n          }\r\n        </li>\r\n      </ol>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect ( () => {\r\n    \r\n    getGifs (category)\r\n      .then( img => {\r\n        setState ({ \r\n          data: img,\r\n          loading: false\r\n        })\r\n      })\r\n    },[category])\r\n\r\n  return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GiffGrid } from './components/GiffGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One punch'])  \r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n          <AddCategory  setCategories={ setCategories }/>\r\n        <hr/>\r\n        <ol>\r\n          {\r\n            categories.map( category => (\r\n              <GiffGrid\r\n                key = { category }\r\n                category = { category }\r\n              />\r\n            ))\r\n          }\r\n        </ol>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}